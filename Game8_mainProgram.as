// the variablestop();import com.greensock.*;import com.greensock.easing.*;var levelBgMusic:Sound;var shootSound:Sound;var selectweapon:Sound;var deadSounD:Sound = new deadSound();// game varaible var gameStart:Boolean =false;var gameRound:int = 0; // the cqac urrent game aroundvar gameMark:int; // total game markvar gameMoney:int = 400;var gameOver:Boolean = false;var gameLive:int =1;var messageCount:int = 0; // number of message on stagevar messageArray:Array; //store the mc message which is on stagevar levelXML:XML;var breakTimerCount:int = 0;var breakTimerInterval;var turretListArrayIndex:int = 0 ;var ontheStartBtn:Boolean = false;//------------------------------------------------------// the variable about create message var createInterval;var createdMessage:int; //msg will be created @ each roundvar messageListArray:Array; //  list store current message will appearvar messageHolder:Sprite; // container - store all messagevar messageInterval;var turretInterval;var turrentNumber:int;//------------------------------------------------------var placeTurret:Boolean = false; //  determine can place turret or notvar placeX:Number;var placeY:Number;var turretListArray:Array; //  list store current usable turretvar turretStageArray:Array;  // list store the mc turret added on stagevar stageTurretHolder:Sprite;// the container to storevar bgSoundChannel:SoundChannel  = new SoundChannel();var counter:int = 0;var msgPerRound:int = 0;var msgRemind:int = 0;var bulletHolder:Sprite;//------------------------------------------------------var checkPointArray:Array;var btnArray:Array;//------------------------------------------------------var pathRect:Rectangle;var pathBmpData:BitmapData;var turretRect:Rectangle;var turretBmpData:BitmapData;var turretHolderRect:Rectangle;var turretHolderBmpData:BitmapData;var menuHolderBmpData:BitmapData;var mc_Path:Sprite;var arrowInterval;var gStatus:Boolean  = false;var bimap:Bitmap; // the menu barvar TweeningState:Boolean= false;var bgtransform:SoundTransform = new SoundTransform(0.5, 1.0);var bonusMarkInterval;/*-------------------------------------------------------------------------------*/function loadAnimation():void{	TimerText.text ="";	if(gameLevel ==1){		if(animationHolder.numChildren>0)		TweenLite.to(animationHolder.getChildAt(0),1,{x:83.7, y:142, scaleX:0.14,scaleY:0.14,onComplete:newLevel});	}	else if(gameLevel == 2){		if(animationHolder.numChildren>0)		TweenLite.to(animationHolder.getChildAt(0),1,{x:575, y:120, scaleX:0.15,scaleY:0.15,onComplete:newLevel});	}	else if(gameLevel == 3){		if(animationHolder.numChildren>0)		TweenLite.to(animationHolder.getChildAt(0),1,{x:78, y:249.3, scaleX:0.14,scaleY:0.14,onComplete:newLevel});	}}////////////////////////////////////////////////////////////////////////////////////////////////////////new level function newLevel():void{//	Mouse.show();	trace(gameScore);	mc_StageTurInfo.visible = true;	mc_InfoBoard.visible = true;	if(animationHolder != null){		this.removeChild(animationHolder);	}		flash.media.SoundMixer.stopAll();	gStatus = false;	btn_GameStart.gotoAndStop(1);		TimerText.text ="";	TimerText.mouseEnabled = false;	TimerText.visible = false;		txt_remind.text = "";	txt_remind.mouseEnabled = false;		mc_MenuBar.visible = false;    turretListArray = new Array(); //  list store current usable turret    turretStageArray = new Array(); // list store the mc turret added on stage	messageArray = new Array();	messageListArray = new Array();	if(gameLevel ==1)	checkPointArray  = new Array(checkPoint0,checkPoint1,checkPoint2,checkPoint3,checkPoint4,checkPoint5,checkPoint6,checkPoint7,checkPoint8,checkPoint9,checkPoint10,checkPoint11,checkPoint12,checkPoint13,checkPoint14,checkPoint15,checkPoint16,checkPoint17,checkPoint18,checkPoint19,checkPoint20,checkPoint21,checkPoint22,checkPoint23,checkPoint24,checkPoint25,checkPoint26,checkPoint27,checkPoint28,checkPoint29,checkPoint30,checkPoint31);	else if(gameLevel ==2)	checkPointArray  = new Array(checkPoint0,checkPoint1,checkPoint2,checkPoint3,checkPoint4,checkPoint5,checkPoint6,checkPoint7,checkPoint8,checkPoint9,checkPoint10,checkPoint11,checkPoint12,checkPoint13,checkPoint14);	else if(gameLevel ==3)	checkPointArray  = new Array(checkPoint0,checkPoint1,checkPoint2,checkPoint3,checkPoint4,checkPoint5,checkPoint6,checkPoint7,checkPoint8,checkPoint9,checkPoint10);		if(gameLevel == 1){		//mc_Beginning.gotoAndStop(4);		mc_BtnMenu.btnContainer.setChildIndex(mc_BtnMenu.btnContainer.eachBtn0,0);		mc_BtnMenu.btnContainer.setChildIndex(mc_BtnMenu.btnContainer.eachBtn1,1);		mc_BtnMenu.btnContainer.setChildIndex(mc_BtnMenu.btnContainer.eachBtn2,2);		mc_BtnMenu.btnContainer.setChildIndex(mc_BtnMenu.btnContainer.eachBtn3,3);		mc_BtnMenu.btnContainer.setChildIndex(mc_BtnMenu.btnContainer.eachBtn4,4);		mc_BtnMenu.btnContainer.setChildIndex(mc_BtnMenu.btnContainer.eachBtn5,5);	}		btnArray = new Array(mc_BtnMenu.btnContainer.eachBtn0,mc_BtnMenu.btnContainer.eachBtn1,mc_BtnMenu.btnContainer.eachBtn2,mc_BtnMenu.btnContainer.eachBtn3,mc_BtnMenu.btnContainer.eachBtn4,mc_BtnMenu.btnContainer.eachBtn5);	if(gameLevel ==1){		gameMark = 0 ;		gameScore = 0 ;		levelBgMusic= new bgMusic();		gameMoney =250;	}	else if(gameLevel == 2){		levelBgMusic= new bgMusic2();		gameMoney = 400;	}	else if(gameLevel == 3){		levelBgMusic= new bgMusic();		gameMoney = 700;	}		shootSound = new shoot();	selectweapon = new Selectweapon();		mc_Path = new Sprite();	stageTurretHolder = new Sprite(); // the container to store	bulletHolder = new Sprite();	messageHolder= new Sprite(); //	addChild(mc_Path);	addChild(messageHolder);	addChild(stageTurretHolder);	addChild(bulletHolder);	this.setChildIndex(mc_InfoBoard,this.numChildren -1);	this.setChildIndex(mc_StageTurInfo,this.numChildren -1);		mc_InfoBoard.mouseEnabled = false;	mc_StageTurInfo.mouseEnabled = false;	mc_StageTurInfo.mouseChildren = false;		mc_InfoBoard.mouseChildren = false;	gameRound = 1;	gameMark = 0;	gameLive = 30;	messageCount= 0;		bgSoundChannel = levelBgMusic.play();	bgSoundChannel.addEventListener(Event.SOUND_COMPLETE,loopMusic);	text_gameLive.text = gameLive.toString();	text_gameLive.mouseEnabled = false;	text_gameMark.text = gameMark.toString();	text_gameMark.mouseEnabled = false;	text_gameMoney.text = gameMoney.toString();	text_gameMoney.mouseEnabled = false;	text_Round.text= gameRound.toString() + " / 10";	text_Round.mouseEnabled = false;		if(mc_BtnMenu.btnContainer.getChildByName("ShapeBG") == null) {		var shape:Shape = new Shape();		shape.graphics.beginFill(0xffffff,0);		shape.graphics.drawCircle(0,0,95);		shape.graphics.endFill();		shape.name = "ShapeBG";		mc_BtnMenu.btnContainer.addChild(shape);	}		mc_MenuBar.mouseEnabled= false;	messageHolder.mouseEnabled = false;	messageHolder.mouseChildren = false;		turretHolderBmpData = new BitmapData(650,450,true,0);	turretHolderBmpData.draw(stageTurretHolder);		mc_MenuBar.gotoAndStop(1);	menuHolderBmpData = new BitmapData(650,450,true,0);	menuHolderBmpData.draw(mc_MenuBar);	mc_MenuBar.gotoAndStop(2);		drawPathLine();		if(gameRound == 1){		getInfoFromXML();	}	else{		getInfoForEachLevel();	}		btn_GameStart.visible = true;	btn_GameStart.addEventListener(MouseEvent.CLICK,clickStartListener);	mc_BtnMenu.addEventListener(Event.ENTER_FRAME,btnMenuEnterFrame);	btn_GameStart.addEventListener(MouseEvent.MOUSE_OVER,overStartListener);	btn_GameStart.addEventListener(MouseEvent.MOUSE_OUT,outStartListener);}function removeAllListener():void{			mc_InfoBoard.scaleY=0;		mc_InfoBoard.alpha=0;		mc_InfoBoard.visible = false;		mc_StageTurInfo.scaleY=0;		mc_StageTurInfo.alpha=0;		mc_StageTurInfo.visible = false;		if(messageInterval != null){clearInterval(messageInterval);}		if(createInterval != null){clearInterval(createInterval);}		if(turretInterval != null){clearInterval(turretInterval);}		if(breakTimerInterval!= null){clearInterval(breakTimerInterval);}				this.removeEventListener(Event.ENTER_FRAME,placeObjectEnterFrame);		this.removeEventListener(MouseEvent.CLICK,turretDownClickHandler);				mc_BtnMenu.removeEventListener(Event.ENTER_FRAME,btnMenuEnterFrame);		btn_GameStart.removeEventListener(MouseEvent.CLICK,clickStartListener);		btn_GameStart.removeEventListener(MouseEvent.MOUSE_OVER,overStartListener);		btn_GameStart.removeEventListener(MouseEvent.MOUSE_OUT,outStartListener);						if(turretHolderBmpData != null)		turretHolderBmpData.dispose();		if(pathBmpData != null)		pathBmpData.dispose();		if(turretBmpData != null)		turretBmpData.dispose();				gameStart = false;		setTimeout(clearChildrenOnStage,1500);		}function overStartListener(evt:MouseEvent){	ontheStartBtn  = true;	this.buttonMode = true;	btn_GameStart.scaleX = 1.1;	btn_GameStart.scaleY = 1.1;}function outStartListener(evt:MouseEvent){	ontheStartBtn  = false;	this.buttonMode = false;	btn_GameStart.scaleX = 1.0;	btn_GameStart.scaleY = 1.0;}function clearChildrenOnStage():void{			if(turretStageArray.length >0){			var delTurret:MovieClip = turretStageArray.pop();			delTurret.stopDrag();			if(delTurret.parent == this){			this.removeChild(delTurret);			}		}			while(turretListArray.length > 0){turretListArray.pop();}		while(turretStageArray.length > 0){			var tempMc:MovieClip = new MovieClip();			tempMc = turretStageArray.pop();			tempMc.removeThis();		}			while(messageArray.length > 0){			messageArray.pop()			;}		while(messageListArray.length > 0){messageListArray.pop();}				bulletHolder.parent.removeChild(bulletHolder);		messageHolder.parent.removeChild(messageHolder);		stageTurretHolder.parent.removeChild(stageTurretHolder);		mc_Path.parent.removeChild(mc_Path);		TweenLite.to(mc_InfoBoard,0.1,{scaleY:0,alpha:0})		TweenLite.to(mc_StageTurInfo,0.1,{scaleY:0,alpha:0})		if(gameLive>0){			bonusMarkInterval = setInterval(bonusMark,30);		}		else if(gameOver == true || gameLive<=0 ){			gameScore =gameScore + gameMark;			mc_StageTurInfo.visible = false;			mc_InfoBoard.visible = false;			this.gotoAndStop("frameGameOver");		}}function bonusMark():void{	if(gameMoney > 50){		gameMoney  = gameMoney -50 ;		text_gameMoney.text = gameMoney.toString();		gameMark = gameMark +50; 		text_gameMark.text = gameMark.toString();	}	else if(gameMoney <= 50 && gameMoney > 0){		gameMoney  = gameMoney -1 ;		text_gameMoney.text = gameMoney.toString();		gameMark = gameMark +1; 		text_gameMark.text = gameMark.toString();	}	else {		clearInterval(bonusMarkInterval);		gameScore =gameScore + gameMark;		if(gameLevel ==1)		{			var stage1Clear:Stage1Clear = new Stage1Clear();			stage1Clear.x = 325;			stage1Clear.y = 225;			this.addChildAt(stage1Clear,this.numChildren -1);		}else if(gameLevel ==2){			 var stage2Clear:Stage2Clear = new Stage2Clear();			stage2Clear.x = 325;			stage2Clear.y = 225;			this.addChildAt(stage2Clear,this.numChildren -1);		}		else if(gameLevel ==3){			gotoAndStop("frameGameWin");		}	}				}////////////////////////////////////////////////////////////////////////////////////////////////////////function of xmlfunction getInfoFromXML():void{	var levelInfoLoader:URLLoader = new URLLoader();	if(gameLevel == 1)	levelInfoLoader.load(new URLRequest("xml/level1.xml"));	if(gameLevel == 2)	levelInfoLoader.load(new URLRequest("xml/level2.xml"));	if(gameLevel == 3)	levelInfoLoader.load(new URLRequest("xml/level3.xml"));		levelInfoLoader.addEventListener(Event.COMPLETE,processXML);}//----------------------------------------------------------------------------------------------------function processXML(e:Event):void {	levelXML = new XML(e.target.data);	levelXML.ignoreWhite=true;	getInfoForEachLevel();}//----------------------------------------------------------------------------------------------------function getInfoForEachLevel():void{		var tempRID = gameRound.toString();		var msgTurList:XMLList = levelXML.ROUND.(@RID == tempRID);	//trace( msgTurList.toString());				for each(var item:XML in msgTurList.MSG){				var msgname:String = item.attribute("MID").toString();				var msgNumber:int = int(item);				for(var j:int = 0;j<msgNumber;j++){					messageListArray.push(msgname);				}			}						var newTurNumber:int =0;			for each(var item2:XML in msgTurList.TUR){				var turName:String = item2.attribute("TID");				changeTurretButton(turName);				newTurNumber = newTurNumber +1;			}						if(newTurNumber >0){								var newArray:Array = new Array();				turrentNumber = turretListArray.length;								while (turretListArray.length >0){					if(turretListArray[0].name !="unknowBtn"){						newArray.push(turretListArray[0]); 					}					turretListArray.shift();				}				turretListArray = newArray;				turrentNumber = turretListArray.length;							if(turrentNumber<6){					for (var i:int = 0 ; i<(6-turrentNumber);i++){						var unknowBtn:UnkownBtn = new UnkownBtn();						unknowBtn.name = "unknowBtn"						turretListArray.push(unknowBtn);					}				}				var aryLen:int = turretListArray.length;					for(var k:int = 0 ;k<6;k++){					if(btnArray[k].getChildByName("btnCon")!= null){						btnArray[k].removeChild(btnArray[k].getChildByName("btnCon"));					}					var spriteInBtn:Sprite = new Sprite();					spriteInBtn.name = "btnCon";					btnArray[k].addChild(spriteInBtn);				}				mc_BtnMenu.btnContainer.eachBtn0.getChildByName("btnCon").addChild(turretListArray[0]);				mc_BtnMenu.btnContainer.eachBtn1.getChildByName("btnCon").addChild(turretListArray[1]);				mc_BtnMenu.btnContainer.eachBtn2.getChildByName("btnCon").addChild(turretListArray[2]);				mc_BtnMenu.btnContainer.eachBtn3.getChildByName("btnCon").addChild(turretListArray[3]);				mc_BtnMenu.btnContainer.eachBtn5.getChildByName("btnCon").addChild(turretListArray[aryLen-1]);				mc_BtnMenu.btnContainer.eachBtn4.getChildByName("btnCon").addChild(turretListArray[aryLen-2]);			}						createdMessage = messageListArray.length;			msgPerRound = createdMessage;			msgRemind = createdMessage;			txt_remind.text = msgRemind.toString()+"/"+ msgPerRound.toString();						if (gameStart == true){				if(createInterval !=null)				clearInterval(createInterval);				var createInt:int = 1000;				switch(gameLevel){					case 1:{break;createInt = 900 - gameRound*2;}					case 2:{break;createInt = 1000 - gameRound*2;}					case 3:{break;createInt = 1100 - gameRound;}					default:{createInt = 1000;break;}				}				createInterval = setInterval(createMessage,createInt);			}			messageCount = 0;			mc_BtnMenu.btnContainer.addEventListener(MouseEvent.CLICK,createTurHandler);}///////////////////////////////////////////////////////////////////////////////////////////////////////----------------------------------------------------------------------------------------------------function clickStartListener(evt:MouseEvent){	gStatus = !gStatus; 		if(gStatus == true){		if(gameStart == true){			if(messageInterval !=null){clearInterval(messageInterval);}			var messageInt:int = 20;				switch(gameLevel){					case 1:{break;messageInt = 20 - gameRound*0.01;}					case 2:{break;messageInt = 20 - gameRound*0.02;}					case 3:{break;messageInt = 40 - gameRound*0.01;}					default:{messageInt = 20;break;}				}			messageInterval=setInterval(messageIntervalHandler,messageInt);					}		if(createInterval !=null){clearInterval(createInterval);}		var createInt:int = 1000;				switch(gameLevel){					case 1:{break;createInt = 900 - gameRound*2;}					case 2:{break;createInt = 1000 - gameRound*2;}					case 3:{break;createInt = 1100 - gameRound;}					default:{createInt = 1000;break;}				}			createInterval = setInterval(createMessage,createInt);					if(breakTimerCount != 0){			if(breakTimerInterval != null)				{clearInterval(breakTimerInterval);}				breakTimerCount = breakTimerCount -1;				breakTimerInterval = setInterval(breakTimer,1000);		}		if(turretInterval !=null)		{clearInterval(turretInterval);}			turretInterval = setInterval(turretIntervalHandler,20);					gameStart = true;		btn_GameStart.gotoAndStop(2);				}	else{		btn_GameStart.gotoAndStop(1);		clearInterval(messageInterval);		clearInterval(createInterval);		clearInterval(turretInterval);		clearInterval(breakTimerInterval);	}}//----------------------------------------------------------------------------------------------------function addChildren(hitObject:String):void{		var placedObject = false;	var a_turrent:Turret = new Turret();		switch(hitObject){		case "Btn_TurBeNetBoy":{							var TurBeNetBoy:conTurBeNetBoy= new conTurBeNetBoy();							TurBeNetBoy.name = "conTurrent";							if(gameMoney >= 32){								a_turrent.addChild(TurBeNetBoy);								a_turrent.turType = "tBeNetBoy";								a_turrent.bulType=1;								a_turrent.price = 32;								a_turrent.range = 1;								a_turrent.damage = 1;								a_turrent.reloadTime = 30;								placedObject = true;							}							break;		}		case "Btn_TurShield":{							var TurShield:conTurShield= new conTurShield();							TurShield.name = "conTurrent";							if(gameMoney >= 44){								a_turrent.addChild(TurShield);								a_turrent.turType = "tShield";								a_turrent.bulType=2;								a_turrent.price = 44;								a_turrent.range = 2;								a_turrent.damage = 1;								a_turrent.reloadTime = 25;								a_turrent.rotatable = false;								placedObject = true;							}							break;		}		case "Btn_TurWall":{							var TurWall:conTurWall= new conTurWall();							TurWall.name = "conTurrent";							if(gameMoney >= 52){								a_turrent.turType = "tWall";								a_turrent.bulType=3;								a_turrent.price = 52;								a_turrent.range = 2;								a_turrent.damage = 1;								a_turrent.reloadTime = 30;								a_turrent.rotatable = false;								a_turrent.addChild(TurWall);								placedObject = true;							}							break;		}		case "Btn_TurLock":{							var TurLock:conTurLock= new conTurLock();							TurLock.name = "conTurrent";							if(gameMoney >= 65){								a_turrent.turType = "tLock";								a_turrent.bulType=1;								a_turrent.price = 65;								a_turrent.range = 2;								a_turrent.damage = 2;								a_turrent.reloadTime = 25;								a_turrent.addChild(TurLock);								placedObject = true;							}							break;		}		case "Btn_TurAntiVirus":{							var TurAntiVirus:conTurAntiVirus= new conTurAntiVirus();							TurAntiVirus.name = "conTurrent";							if(gameMoney >= 79){								a_turrent.turType = "tAntiVirus";								a_turrent.bulType=1;								a_turrent.price = 79;								a_turrent.range = 2;								a_turrent.damage = 3;								a_turrent.reloadTime = 20;								a_turrent.rotatable = false;								a_turrent.addChild(TurAntiVirus);								placedObject = true;							}							break;		}		case "Btn_TurStop":{							var TurStop:conTurStop= new conTurStop();							TurStop.name = "conTurrent";							if(gameMoney >= 83){								a_turrent.turType = "tStop";								a_turrent.bulType=3;								a_turrent.price = 83;								a_turrent.range = 3;								a_turrent.damage = 2;								a_turrent.reloadTime = 25;								a_turrent.addChild(TurStop);								placedObject = true;							}							break;		}		case "Btn_TurCare":{							var TurCare:conTurCare= new conTurCare();							TurCare.name = "conTurrent";							if(gameMoney >= 91){							a_turrent.turType = "tCare";							a_turrent.bulType=2;							a_turrent.price = 91;							a_turrent.range = 3;							a_turrent.damage = 3;							a_turrent.reloadTime = 20;							a_turrent.addChild(TurCare);							a_turrent.rotatable = false;							placedObject = true;							}							break;		}		case "Btn_TurRubbishBin":{							var TurRubbishBin:conTurRubbishBin= new conTurRubbishBin();							TurRubbishBin.name = "conTurrent";							if(gameMoney >= 108){							a_turrent.turType = "tRubbishBin";							a_turrent.bulType=2;							a_turrent.price = 108;							a_turrent.range = 3;							a_turrent.damage = 4;							a_turrent.reloadTime = 15;							a_turrent.addChild(TurRubbishBin);							a_turrent.rotatable = false;							placedObject = true;							}							break;		}				case "Btn_TurMum":{							var TurMum:conTurMum= new conTurMum();							TurMum.name = "conTurrent";							if(gameMoney >= 123){								a_turrent.turType = "tMum";								a_turrent.bulType=1;								a_turrent.price = 123;								a_turrent.range = 4;								a_turrent.damage = 4;								a_turrent.reloadTime = 15;								a_turrent.addChild(TurMum);								placedObject = true;							}							break;		}		case "Btn_TurMagnet":{							var TurMagnet:conTurMagnet= new conTurMagnet();							TurMagnet.name = "conTurrent";							if(gameMoney >= 146){								a_turrent.turType = "tMagnet";								a_turrent.bulType=3;								a_turrent.price = 146;								a_turrent.range = 5;								a_turrent.damage = 4;								a_turrent.reloadTime = 15;								a_turrent.addChild(TurMagnet);								a_turrent.rotatable = false;								placedObject = true;							}							break;		}		case "Btn_TurDove":{							var TurDove:conTurDove= new conTurDove();							TurDove.name = "conTurrent";							if(gameMoney >= 163){							a_turrent.turType = "tDove";							a_turrent.bulType=2;							a_turrent.price = 163;							a_turrent.range = 4;							a_turrent.damage = 5;							a_turrent.reloadTime = 15;							a_turrent.addChild(TurDove);							placedObject = true;							}							break;		}		case "Btn_TurCannon":{							var TurCannon:conTurCannon= new conTurCannon();							TurCannon.name = "conTurrent";							if(gameMoney >= 182){								a_turrent.turType = "tCannon";								a_turrent.rotatable = false;								a_turrent.bulType=1;								a_turrent.price = 182;								a_turrent.range = 5;								a_turrent.damage = 5;								a_turrent.reloadTime = 10;								a_turrent.addChild(TurCannon);							placedObject = true;							}							break;		}		case "Btn_TurPolice":{							var TurPolice:conTurPolice= new conTurPolice();							TurPolice.name = "conTurrent";							if(gameMoney >= 201){							a_turrent.turType = "tPolice";							a_turrent.bulType=1;							a_turrent.price = 201;							a_turrent.range = 5;							a_turrent.damage = 5;							a_turrent.reloadTime = 10;							a_turrent.addChild(TurPolice);							placedObject = true;							}							break;		}		default:{				trace("failure");}	};		if(placedObject == true){		Mouse.hide();		selectweapon.play();		if(a_turrent.bulType ==2){			a_turrent.reloadTime = a_turrent.reloadTime+3;		}		else if(a_turrent.bulType ==3){			a_turrent.reloadTime = a_turrent.reloadTime*5;		}		a_turrent.range = (a_turrent.range -1)*5+40;		a_turrent.addRangePrice = 5+ ((a_turrent.range-40)/5+1)*5;				a_turrent.addPowerPrice = 8+ a_turrent.damage*8;		this.addChild(a_turrent);				a_turrent.startDrag(true,new Rectangle(10,20,620,420));		turretStageArray.push(a_turrent);		turretBmpData = new BitmapData(55,60,true,0);		turretBmpData.draw(a_turrent.mcTestPoint);		placeX = 10;		placeY = 0;				stage.focus = stage;		this.addEventListener(Event.ENTER_FRAME,placeObjectEnterFrame);	}}//----------------------------------------------------------------------------------------------------function turretDownClickHandler(evt:MouseEvent):void{		this.removeEventListener(Event.ENTER_FRAME,placeObjectEnterFrame);	this.removeEventListener(MouseEvent.CLICK,turretDownClickHandler);		var tempLen:int = turretStageArray.length-1;	var tempMcHandle:MovieClip = turretStageArray[tempLen];		if(placeTurret == true){		tempMcHandle.aryIndex = tempLen;		gameMoney = gameMoney - tempMcHandle.price;		text_gameMoney.text = gameMoney.toString();		tempMcHandle.stopDrag();		tempMcHandle.triggerStart();		this.removeChild(turretStageArray[tempLen]);		turretHolderBmpData.dispose();		var holderChild:int = stageTurretHolder.numChildren;		if(holderChild == 0){			stageTurretHolder.addChild(turretStageArray[tempLen]);		}		else {			for (var f:int = 0; f<holderChild; f++){				if(stageTurretHolder.getChildAt(f).y > tempMcHandle.y){					if(f ==0)					stageTurretHolder.addChildAt(turretStageArray[tempLen],f);					else {					stageTurretHolder.addChildAt(turretStageArray[tempLen],f-1);					}					break;				}				if(f == holderChild-1){				stageTurretHolder.addChild(turretStageArray[tempLen]);				}			}		}				setTimeout(reArrangeIndexTur,500);		turretHolderBmpData = new BitmapData(650,450,true,0);		turretHolderBmpData.draw(stageTurretHolder);		tempMcHandle.detectArea(true);		tempMcHandle.onStage = true;	}	else {		var delTurret:MovieClip = turretStageArray.pop();		delTurret.stopDrag();		this.removeChild(delTurret);	}		Mouse.show();	turretBmpData.dispose();	mc_BtnMenu.btnContainer.addEventListener(MouseEvent.CLICK,createTurHandler);	counter = 0;	turretRect = null;			}function reArrangeIndexTur():void{	var holderChild:int  = stageTurretHolder.numChildren;		for (var q:int = 0; q<holderChild; q++){			if(q>0 && stageTurretHolder.getChildAt(q).y < stageTurretHolder.getChildAt(q-1).y){					stageTurretHolder.swapChildren(stageTurretHolder.getChildAt(q),stageTurretHolder.getChildAt(q-1));			}		}}//====================================================================================================// normall function function drawPathLine():void{		var pShape = new Shape();		pShape.graphics.moveTo(checkPointArray[0].x,checkPointArray[0].y);	pShape.graphics.lineStyle(25,0x00ffff,1);		if(gameLevel == 1){				for(var q:int = 0 ; q<32; q++){			pShape.graphics.lineTo(checkPointArray[q].x,checkPointArray[q].y);		}	}		else if(gameLevel == 2){			for(var i:int = 0 ; i<9; i++){			pShape.graphics.lineTo(checkPointArray[i].x,checkPointArray[i].y);		}		pShape.graphics.moveTo(checkPointArray[2].x,checkPointArray[2].y);		pShape.graphics.lineTo(checkPointArray[9].x,checkPointArray[9].y);				pShape.graphics.moveTo(checkPointArray[4].x,checkPointArray[4].y);		pShape.graphics.lineTo(checkPointArray[7].x,checkPointArray[7].y);				pShape.graphics.moveTo(checkPointArray[8].x,checkPointArray[8].y);		pShape.graphics.lineTo(checkPointArray[12].x,checkPointArray[12].y);				pShape.graphics.moveTo(checkPointArray[9].x,checkPointArray[9].y);				for(var k:int = 9 ; k<15; k++){			pShape.graphics.lineTo(checkPointArray[k].x,checkPointArray[k].y);		}	}	else if(gameLevel == 3){			pShape.graphics.moveTo(checkPointArray[0].x,checkPointArray[0].y);		pShape.graphics.lineTo(checkPointArray[1].x,checkPointArray[1].y);		pShape.graphics.lineTo(checkPointArray[4].x,checkPointArray[4].y);		pShape.graphics.lineTo(checkPointArray[5].x,checkPointArray[5].y);		pShape.graphics.lineTo(checkPointArray[3].x,checkPointArray[3].y);		pShape.graphics.lineTo(checkPointArray[2].x,checkPointArray[2].y);				pShape.graphics.moveTo(checkPointArray[0].x,checkPointArray[0].y);		pShape.graphics.lineTo(checkPointArray[9].x,checkPointArray[9].y);				pShape.graphics.moveTo(checkPointArray[2].x,checkPointArray[2].y);		pShape.graphics.lineTo(checkPointArray[8].x,checkPointArray[8].y);				pShape.graphics.moveTo(checkPointArray[5].x,checkPointArray[5].y);		pShape.graphics.lineTo(checkPointArray[7].x,checkPointArray[7].y);				pShape.graphics.moveTo(checkPointArray[4].x,checkPointArray[4].y);		pShape.graphics.lineTo(checkPointArray[7].x,checkPointArray[7].y);		pShape.graphics.lineTo(checkPointArray[9].x,checkPointArray[9].y);		pShape.graphics.lineTo(checkPointArray[10].x,checkPointArray[10].y);				pShape.graphics.moveTo(checkPointArray[5].x,checkPointArray[5].y);		pShape.graphics.lineTo(checkPointArray[6].x,checkPointArray[6].y);		pShape.graphics.lineTo(checkPointArray[8].x,checkPointArray[8].y);		pShape.graphics.lineTo(checkPointArray[10].x,checkPointArray[10].y);	}	pShape.graphics.beginFill(0x00ffff, 1); 	if(gameLevel ==1)		pShape.graphics.drawRect(0,115,60,60);		if(gameLevel ==2)	pShape.graphics.drawRect(558,83,60,60);		if(gameLevel ==3)	{		pShape.graphics.drawRect(560,267,60,60);		pShape.graphics.drawRect(52,210,60,60);	}	pShape.graphics.endFill(); 			mc_Path.addChild(pShape);	mc_Path.visible = false;	pathBmpData = new BitmapData(650,450,true,0);	pathBmpData.draw(mc_Path);	mc_Path.cacheAsBitmap = true;}//----------------------------------------------------------------------------------------------------function changeTurretButton(changeItem:String):void{	var helpShape:Shape = new Shape();	helpShape.graphics.beginFill(0xffffff,0);	helpShape.graphics.drawCircle(0,0,24);	helpShape.graphics.endFill()	helpShape.name = "ShapeBG";		switch(changeItem){		case "TURBENETBOY":{										var btn_TurBeNetBoy:btnTurBeNetBoy= new btnTurBeNetBoy();					btn_TurBeNetBoy.name = "Btn_TurBeNetBoy";					btn_TurBeNetBoy.addChildAt(helpShape,0);					turretListArray.push(btn_TurBeNetBoy);					break;					}		case "TURSHIELD":{										var btn_TurShield:btnTurShield = new btnTurShield();					btn_TurShield.name = "Btn_TurShield";					btn_TurShield.addChild(helpShape);					turretListArray.push(btn_TurShield);					break;		}		case "TURWALL":{										var btn_TurWall:btnTurWall = new btnTurWall();					btn_TurWall.name = "Btn_TurWall";					btn_TurWall.addChild(helpShape);					turretListArray.push(btn_TurWall);					break;		}		case "TURLOCK":{										var btn_TurLock:btnTurLock = new btnTurLock();					btn_TurLock.name = "Btn_TurLock";					btn_TurLock.addChildAt(helpShape,0);					turretListArray.push(btn_TurLock);					break;		}				case "TURANTIVIRUS":{										var btn_TurAntiVirus:btnTurAntiVirus = new btnTurAntiVirus();					btn_TurAntiVirus.name = "Btn_TurAntiVirus";					btn_TurAntiVirus.addChildAt(helpShape,0);					turretListArray.push(btn_TurAntiVirus);					break;		}		case "TURSTOP":{					var btn_TurStop:btnTurStop = new btnTurStop();					btn_TurStop.name = "Btn_TurStop";					btn_TurStop.addChildAt(helpShape,0);					turretListArray.push(btn_TurStop);					break;		}		case "TURCARE":{					var btn_TurCare:btnTurCare = new btnTurCare();					btn_TurCare.name = "Btn_TurCare";					btn_TurCare.addChildAt(helpShape,0);					turretListArray.push(btn_TurCare);					break;		}			case "TURRUBBLISHBIN":{					var btn_TurRubbishBin:btnTurRubbishBin = new btnTurRubbishBin();					btn_TurRubbishBin.name = "Btn_TurRubbishBin";					btn_TurRubbishBin.addChildAt(helpShape,0);					turretListArray.push(btn_TurRubbishBin);					break;		}			case "TURMUM":{					var btn_TurMum:btnTurMum = new btnTurMum();					btn_TurMum.name = "Btn_TurMum";					btn_TurMum.addChildAt(helpShape,0);					turretListArray.push(btn_TurMum);					break;		}		case "TURMAGNET":{					var btn_TurMagnet:btnTurMagnet = new btnTurMagnet();					btn_TurMagnet.name = "Btn_TurMagnet";					btn_TurMagnet.addChildAt(helpShape,0);					turretListArray.push(btn_TurMagnet);					break;		}			case "TURDOVE":{					var btn_TurDove:btnTurDove = new btnTurDove();					btn_TurDove.name = "Btn_TurDove";					btn_TurDove.addChildAt(helpShape,0);					turretListArray.push(btn_TurDove);					break;		}			case "TURCANNON":{					var btn_TurCannon:btnTurCannon = new btnTurCannon();					btn_TurCannon.name = "Btn_TurCannon";					btn_TurCannon.addChildAt(helpShape,0);					turretListArray.push(btn_TurCannon);					break;		}		case "TURPOLICE":{					var btn_TurPolice:btnTurPolice = new btnTurPolice();					btn_TurPolice.name = "Btn_TurPolice";					btn_TurPolice.addChildAt(helpShape,0);					turretListArray.push(btn_TurPolice);					break;		}		};}//----------------------------------------------------------------------------------------------------function reNewGameStatus():void{msgRemind = msgRemind - 1;txt_remind.text = msgRemind.toString()+"/"+ msgPerRound.toString();}//----------------------------------------------------------------------------------------------------//function of messagefunction createMessage(){	    if (createdMessage == 0){        clearInterval(createInterval);    }    else {		var msgName:String = messageListArray.pop();        createdMessage = createdMessage - 1;       	messageCount = messageCount + 1;					var newMessage:Message;		switch(msgName){						case "MSGMSN":{							newMessage = new Message(1,3,5); 							newMessage.name = "MSGMSN_"+messageCount;							var newMsgMsn:mcMsgMsn = new mcMsgMsn();							newMessage.addChildAt(newMsgMsn,0);							break;			}			case "MSGPIC":{							newMessage = new Message(1,4,10); 							newMessage.name = "MSGPIC_"+messageCount;							var newMsgPic:mcMsgPic = new mcMsgPic();							newMessage.addChildAt(newMsgPic,0);							break;			}			case "MSGBOMB":{							newMessage = new Message(1,4,15); 							newMessage.name = "MSGBOMB_"+messageCount;							var newMsgBomb:mcMsgBomb = new mcMsgBomb();							newMessage.addChildAt(newMsgBomb,0);							break;			}			case "MSGEMAIL":{							newMessage = new Message(1,5,20); 							newMessage.name = "MSGEMAIL_"+messageCount;							var newMsgEmail:mcMsgEmail = new mcMsgEmail();							newMessage.addChildAt(newMsgEmail,0);							break;			}			case "MSGAIR":{							newMessage = new Message(1,5,25); 							newMessage.name = "MSGAIR_"+messageCount;							var newMsgAir:mcMsgAir = new mcMsgAir();							newMessage.addChildAt(newMsgAir,0);							break;			}			case "MSGFIST":{							newMessage = new Message(1,6,30); 							newMessage.name = "MSGFIST_"+messageCount;							var newMsgFist:mcMsgFist = new mcMsgFist();							newMessage.addChildAt(newMsgFist,0);							break;			}			case "MSGSKELETON":{							newMessage = new Message(1,5,45); 							newMessage.name = "MSGSKELETON_"+messageCount;							var newMsgSkeleton:mcMsgSkeleton = new mcMsgSkeleton();							newMessage.addChildAt(newMsgSkeleton,0);							break;			}			case "BIGBROTHER1":{							newMessage = new Message(1,10,100); 							newMessage.name = "BIGBROTHER1_"+messageCount;							var newBIGBROTHER1:mcBigBrother1= new mcBigBrother1();							newMessage.addChildAt(newBIGBROTHER1,0);							break;			} 			case "BIGBROTHER2":{							newMessage = new Message(1,7,200); 							newMessage.name = "BIGBROTHER2_"+messageCount;							var newBIGBROTHER2:mcBigBrother2= new mcBigBrother2();							newMessage.addChildAt(newBIGBROTHER2,0);							break;			} 			case "BIGBROTHER3":{							newMessage = new Message(1,7,200); 							newMessage.name = "BIGBROTHER3_"+messageCount;							var newBIGBROTHER3:mcBigBrother3= new mcBigBrother3();							newMessage.addChildAt(newBIGBROTHER3,0);							break;			} 		};						messageArray[messageArray.length] = newMessage;			newMessage.x = checkPointArray[0].x;			newMessage.y = checkPointArray[0].y;			newMessage.play();			messageHolder.addChildAt(newMessage,messageHolder.numChildren);						if(messageCount == 1){				if(messageInterval != null)				clearInterval(messageInterval);							var messageInt:int = 20;				switch(gameLevel){					case 1:{break;messageInt = 20 - gameRound*0.01;}					case 2:{break;messageInt = 20 - gameRound*0.02;}					case 3:{break;messageInt = 40 - gameRound*0.01;}					default:{messageInt = 20;break;}				}				messageInterval= setInterval(messageIntervalHandler,messageInt);			}		}}////////////////////////////////////////////////////////////////////////////////////////////////////////----------------------------------------------------------------------------------------------------function turretIntervalHandler(){		for(var j:int = stageTurretHolder.numChildren-1;j>=0;j--){		var tur = stageTurretHolder.getChildAt(j);					if (tur.canStart == true){				var distance:Number = tur.range+10; //how far the nearest enemy 								var msgTarget = null; 			 //Msg target to shoot at				var manyMsgTarget:Array = new Array();				var BulletType:int = tur.bulType;					for(var i:int= messageHolder.numChildren-1;i>=0;i--){					var currentMsg = messageHolder.getChildAt(i);	// current child									if(Math.sqrt(Math.pow(currentMsg.y - tur.y, 2) + Math.pow(currentMsg.x - tur.x, 2)) < distance){						msgTarget = currentMsg;						manyMsgTarget.push(currentMsg);						if(BulletType ==1 ){						   break;						}					}				}								if(msgTarget != null && tur.canShoot == true){ // defined target													//if the turret is able to shoot						tur.canShoot= false;									tur.getChildByName("conTurrent").play();												var newBullet:Bullet = new Bullet();//create a bullet						var TurrentName:String = tur.turType;												switch(TurrentName){								case "tBeNetBoy":{var BulTurBeNetBoy:bulTurBeNetBoy = new bulTurBeNetBoy();													newBullet.addChild(BulTurBeNetBoy);													break;}								case "tLock":{var BulTurLock:bulTurLock = new bulTurLock();													newBullet.addChild(BulTurLock);													break;}								case "tAntiVirus":{var BulTurAntiVirus:bulTurAntiVirus = new bulTurAntiVirus();													newBullet.addChild(BulTurAntiVirus);													break;}								case "tMum":{var BulTurMum:bulTurMum = new bulTurMum();													newBullet.addChild(BulTurMum);													break;}								case "tCannon":{var BulTurCannon:bulTurCannon = new bulTurCannon();													newBullet.addChild(BulTurCannon);													break;}								case "tPolice":{var BulTurPolice:bulTurPolice = new bulTurPolice();													newBullet.addChild(BulTurPolice);													break;}						};							if(BulletType==1){								newBullet.bulletType1();								newBullet.x = tur.x;								newBullet.y = tur.y;	//set the bullet's coordinates								newBullet.targetMsg = msgTarget; //set the bullet's target and damage								newBullet.damage = tur.damage;								newBullet.limit = distance;								newBullet.triggerX = newBullet.x ;								newBullet.triggerY = newBullet.y ;																newBullet.rotation = Math.atan2((msgTarget.y-tur.y),(msgTarget.x-tur.x))/Math.PI*180-90;								bulletHolder.addChild(newBullet);//add it to the stage							}							var k:int = manyMsgTarget.length;							if(BulletType == 2){								for(var q:int = 0; q<k;q++){									manyMsgTarget[q].Health = manyMsgTarget[q].Health - tur.damage;									gameMark = gameMark + tur.damage;									gameMoney = gameMoney +  tur.damage;									text_gameMark.text = gameMark.toString();									text_gameMoney.text = gameMoney.toString();								}							}							if(BulletType == 3){								for(var w:int = 0; w<k;w++){									manyMsgTarget[w].slowDown();								}							}							shootSound.play();				}						//LOADING THE TURRET				if(!tur.canShoot){//if it isn't loaded					tur.cTime =tur.cTime+1;//then continue the time					if(tur.cTime >= tur.reloadTime){//if time has elapsed for long enough						tur.canShoot = true;//load the turret						tur.cTime = 0;//and reset the time					}				}			}	}}//----------------------------------------------------------------------------------------------------// the function of the turretfunction placeObjectEnterFrame(evt:Event):void{	if(counter == 0){		this.addEventListener(MouseEvent.CLICK,turretDownClickHandler);	}		var tempL:int = turretStageArray.length-1;	var mcHandler:MovieClip = turretStageArray[tempL];	if(pathBmpData.hitTest(new Point(0,0),255,turretBmpData,new Point(mouseX-placeX,mouseY-placeY),255) ||turretHolderBmpData.hitTest(new Point(0,0),255,turretBmpData,new Point(mouseX-placeX,mouseY-placeY),255) || menuHolderBmpData.hitTest(new Point(0,0),255,turretBmpData,new Point(mouseX-placeX,mouseY-placeY),255)){		mcHandler.detectArea(false);		placeTurret = false;	}	else{		mcHandler.detectArea(true);		placeTurret = true;	}	counter = counter +1;}//----------------------------------------------------------------------------------------------------function messageIntervalHandler(){		// for th message Holder	for(var i:int = 0;i<messageHolder.numChildren;i++){//create a loop				var msg = messageHolder.getChildAt(i);//this will hold a certain enemy					if(i>0){			var frontMc:MovieClip = MovieClip(messageHolder.getChildAt(i-1));					if(msg.NextTarget > frontMc.NextTarget){				messageHolder.swapChildren(msg,frontMc);    			}		}//end i		if (msg.MsgSpeed < msg.MaxSpeed){            msg.MsgSpeed = msg.MsgSpeed + 1;		} // end if				var nextTargetX:int = checkPointArray[msg.NextTarget].x + msg.RandomNumber;		var nextTargetY:int = checkPointArray[msg.NextTarget].y + msg.RandomNumber;		var dir:Number = Math.atan2(nextTargetY - msg.y,nextTargetX - msg.x);		msg.x = msg.x + Math.cos(dir) * msg.MaxSpeed;		msg.y = msg.y + Math.sin(dir) * msg.MaxSpeed;		var d:Number= Math.sqrt(Math.pow(msg.x - nextTargetX,2) + Math.pow(msg.y - nextTargetY,2));						if (d < 6){				var achieveTarget:int = msg.NextTarget;				if(gameLevel == 1 && achieveTarget <= 30){					msg.NextTarget = achieveTarget +1;				}				else if(gameLevel ==2){					switch(achieveTarget){						case 1:{msg.NextTarget = 2; 								break;}							case 2:{var randNum:int = Math.random()*d*10%2;									if(randNum == 0){msg.NextTarget = 3;}									else{msg.NextTarget = 9;} 									break;}							case 3:{msg.NextTarget = 4; 									break;}							case 4:{var randNum2:int = Math.random()*10%2;									if(randNum2 == 0){msg.NextTarget = 5;}									else{msg.NextTarget = 7;}									break;}							case 5:{if(msg.PreviousTarget == 4){										msg.NextTarget = 9;msg.visible = false;										msg.x = checkPointArray[msg.NextTarget].x;										msg.y = checkPointArray[msg.NextTarget].y;										msg.visible = true;}									else{msg.NextTarget = 6;}									break;}							case 6:{msg.NextTarget = 7; break;}							case 7:{msg.NextTarget = 8; break;}							case 8:{msg.NextTarget = 12; break;}							case 9:{if(msg.PreviousTarget == 2){										msg.NextTarget = 5;										msg.visible = false;										msg.x = checkPointArray[msg.NextTarget].x;msg.y = checkPointArray[msg.NextTarget].y;										msg.visible = true;}									else{msg.NextTarget = 10;}									break;}							case 10:{msg.NextTarget = 11; break;}							case 11:{msg.NextTarget = 12; break;}							case 12:{msg.NextTarget = 13; break;}							case 13:{msg.NextTarget = 14; break;}					};				}				else if(gameLevel ==3){					switch(achieveTarget){						case 0:{msg.NextTarget = 1;break;}						case 1:{var randNum3:int = Math.random()*10*7*d%3;								if(randNum3==0){									msg.NextTarget = 2;									msg.visible = false;									msg.x = checkPointArray[msg.NextTarget].x;msg.y = checkPointArray[msg.NextTarget].y;									msg.visible = true;}								else if(randNum3 == 1){msg.NextTarget = 4;}								else {msg.NextTarget = 9;}								break;}						case 2:{var randNum4:int = Math.random()*10%2;								if(randNum4 == 0){msg.NextTarget = 3;}									else{msg.NextTarget = 8;}								break;}														case 3:{msg.NextTarget = 5;break;}						case 4:{msg.NextTarget = 5;break;}						case 5:{var randNum5:int = Math.random()*10%2;									if(randNum5 == 0){msg.NextTarget = 6;}									else{msg.NextTarget = 7;}									break;}						case 6:{msg.NextTarget = 8;									break;}						case 7:{msg.NextTarget = 9; break;}						case 8:{msg.NextTarget = 10; break;}						case 9:{msg.NextTarget = 10; break;}					};				}				msg.PreviousTarget = achieveTarget;		}// end if d>6						if(((gameLevel == 2 && msg.PreviousTarget == 14) ||(gameLevel ==1 && msg.PreviousTarget == 31)|| (gameLevel == 3 && msg.PreviousTarget == 10)) && gameOver == false ){			reNewGameStatus();			mc_netBoy.gotoAndPlay(2);			messageHolder.removeChildAt(i);			messageCount = messageCount- 1;			gameLive = gameLive - 1;			deadSounD.play();			text_gameLive.text = gameLive.toString();			if(gameLive <=0){				gameOver = true;				clearInterval(messageInterval);				removeAllListener();			}		}					}	if(msgRemind<= 0 && gameOver == false){		if(messageInterval != null) {clearInterval(messageInterval);}		if(breakTimerInterval != null){clearInterval(breakTimerInterval);}		if(gameRound<10){				this.setChildIndex(TimerText,this.numChildren -1);				breakTimerInterval = setInterval(breakTimer,1000);		}		else if(gameRound >= 10){				removeAllListener();		}	}}//---------------------------------------------------------------------------------------------------function breakTimer():void{		breakTimerCount = breakTimerCount + 1 ; 	TimerText.visible = true;	TimerText.text = (5 - breakTimerCount).toString()+"s";		if(breakTimerCount == 4){		TimerText.text = "Round:"+(gameRound+1).toString();	}	if(breakTimerCount >= 5){		TimerText.visible = false;		TimerText.text= "5s";		gameRound = gameRound + 1;		text_Round.text = gameRound.toString() + " / 10";		getInfoForEachLevel();		breakTimerCount = 0;		clearInterval(breakTimerInterval);	}}/*-------------------------------------------------------------------------------*/// the menu barfunction createTurHandler(evt:MouseEvent):void{	if(evt.target != null){		var targetString:String = evt.target.name;		if(targetString.indexOf("Btn_Tur") == 0){			addChildren(targetString);			mc_BtnMenu.btnContainer.removeEventListener(MouseEvent.CLICK,createTurHandler);			this.buttonMode = true;		}	}}function btnMenuEnterFrame(evt:Event){		// mouse Over		if(mc_BtnMenu.btnContainer.hitTestPoint(mouseX,mouseY,true) && TweeningState == false){  			mc_BtnMenu.btnContainer.addEventListener(MouseEvent.CLICK,createTurHandler);			var rotateAngR0:int = mc_WheelR.rotation;			var rotateAngL0:int = mc_WheelL.rotation;					TweeningState = true;			this.buttonMode = true;						TweenLite.to(mc_HandL,0.5,{rotation:-24});			TweenLite.to(mc_InfoPanel,1,{rotation:0,ease:Back.easeOut});			TweenLite.to(mc_WheelR,0.5,{rotation:(26.6)});			TweenLite.to(mc_WheelL,0.5,{rotation:(-22.7)});			TweenLite.to(mc_BtnMenu.btnContainer,0.5,{x:0, y:2, scaleX:1.05,scaleY:1.05,ease:Bounce.easeOut,onComplete:TargetComplete});		}		// mouse Out		else if (!mc_BtnMenu.btnContainer.hitTestPoint(mouseX,mouseY,true) && TweeningState == false){						var rotateAngR:int = mc_WheelR.rotation;			var rotateAngL:int = mc_WheelL.rotation;						TweeningState = true;			if(ontheStartBtn == false)			this.buttonMode = false;					TweenLite.to(mc_InfoBoard,0.4,{scaleY:0,alpha:0});			TweenLite.to(mc_HandL,0.5,{rotation:0});			TweenLite.to(mc_InfoPanel,1,{rotation:-82.6212,ease:Back.easeOut});			TweenLite.to(mc_WheelR,0.5,{rotation:(6.6)});			TweenLite.to(mc_WheelL,0.5,{rotation:(7.3)});			TweenLite.to(mc_BtnMenu.btnContainer,0.5,{x:0, y:0, scaleX:1,scaleY:1,ease:Bounce.easeOut,onComplete:MouseOutComplete});		}		var tempString:String;				if(MovieClip(mc_BtnMenu.btnContainer.getChildAt(0)).hitTestPoint(mouseX,mouseY,true)){			if(mc_BtnMenu.btnContainer.getChildAt(0).getChildByName("btnCon").numChildren ==0){				var unknowBtn:UnkownBtn = new UnkownBtn();				unknowBtn.name = "unknowBtn";				mc_BtnMenu.btnContainer.getChildAt(0).getChildByName("btnCon").addChild(unknowBtn);			}			tempString = mc_BtnMenu.btnContainer.getChildAt(0).getChildByName("btnCon").getChildAt(0).name;			mc_InfoBoard.gotoAndStop(tempString);			TweenLite.to(mc_InfoBoard,0.4,{scaleY:1.0,alpha:1});								   																		   		}		else if(MovieClip(mc_BtnMenu.btnContainer.getChildAt(1)).hitTestPoint(mouseX,mouseY,true)){				if(mc_BtnMenu.btnContainer.getChildAt(1).getChildByName("btnCon").numChildren ==0){					var unknowBtn1:UnkownBtn = new UnkownBtn();					unknowBtn1.name = "unknowBtn";					mc_BtnMenu.btnContainer.getChildAt(1).getChildByName("btnCon").addChild(unknowBtn1);				}			tempString = mc_BtnMenu.btnContainer.getChildAt(1).getChildByName("btnCon").getChildAt(0).name;			mc_InfoBoard.gotoAndStop(tempString);			TweenLite.to(mc_InfoBoard,0.4,{scaleY:1.0,alpha:1});								   																		   		}		else if(MovieClip(mc_BtnMenu.btnContainer.getChildAt(5)).hitTestPoint(mouseX,mouseY,true)){						if(mc_BtnMenu.btnContainer.getChildAt(5).getChildByName("btnCon").numChildren ==0){						var unknowBtn2:UnkownBtn = new UnkownBtn();						unknowBtn2.name = "unknowBtn";						mc_BtnMenu.btnContainer.getChildAt(5).getChildByName("btnCon").addChild(unknowBtn2);			}			tempString = mc_BtnMenu.btnContainer.getChildAt(5).getChildByName("btnCon").getChildAt(0).name;			mc_InfoBoard.gotoAndStop(tempString);			TweenLite.to(mc_InfoBoard,0.4,{scaleY:1.0,alpha:1});								   																		   		}		else{			TweenLite.to(mc_InfoBoard,0.4,{scaleY:0,alpha:0});		}}function MouseOutComplete():void{	TweeningState = false;}function TargetComplete():void{	TweeningState = false;	hitTestPointMouse();	}/*---------------------------------------------------------------------------*/function hitTestPointMouse():void{		var nearMC:MovieClip = new MovieClip();	var near2MC:MovieClip = new MovieClip();	var near3MC:MovieClip = new MovieClip();		if(mc_BtnMenu != null){		var rotateAngle:int = mc_BtnMenu.rotation;		if(MovieClip(mc_BtnMenu.btnContainer.getChildAt(5)).hitTestPoint(mouseX,mouseY,true) && (turrentNumber>5 || (turrentNumber<6 && rotateAngle+60<=0))){		TweeningState = true;		rotateAngle =  rotateAngle + 60;		turretListArrayIndex = turretListArrayIndex -1;		if(turretListArrayIndex<0){			turretListArrayIndex = turretListArray.length-1;		}		nearMC = MovieClip(mc_BtnMenu.btnContainer.getChildAt(0));		near2MC =MovieClip(mc_BtnMenu.btnContainer.getChildAt(5));		near3MC =MovieClip(mc_BtnMenu.btnContainer.getChildAt(4));				var RA:int = mc_BtnMenu.btnContainer.getChildAt(0).rotation;		RA = RA - 60;				for(var k:int= 0 ; k<5;k++){			mc_BtnMenu.btnContainer.swapChildren(mc_BtnMenu.btnContainer.getChildAt(k),mc_BtnMenu.btnContainer.getChildAt(5));		}				TweenLite.to(mc_HandR,0.5,{rotation:6.8,onComplete:backPositionR});		TweenLite.to(near2MC,0.5,{scaleX:1.2,scaleY:1.2,rotation:RA});		TweenLite.to(nearMC,0.5,{scaleX:0.9,scaleY:0.9,rotation:RA});		TweenLite.to(near3MC,0.5,{scaleX:1.05,scaleY:1.05,rotation:RA});		TweenLite.to(mc_BtnMenu,1,{rotation:rotateAngle,ease:Back.easeOut,onComplete:TargetComplete});		TweenLite.to(mc_BtnMenu.btnContainer.getChildAt(1),0.5,{scaleX:1.05,scaleY:1.05,rotation:RA});		TweenLite.to(mc_BtnMenu.btnContainer.getChildAt(2),0.5,{rotation:RA});		TweenLite.to(mc_BtnMenu.btnContainer.getChildAt(3),0.5,{rotation:RA});		TweenLite.to(mc_BtnMenu.btnContainer.getChildAt(4),0.5,{rotation:RA});		selectweapon.play();		changeTheMenuContent();	}	else if(mc_BtnMenu.btnContainer.getChildAt(1).hitTestPoint(mouseX,mouseY) && rotateAngle>=-(turrentNumber-2)*60){				TweeningState = true;		rotateAngle =  rotateAngle - 60;		turretListArrayIndex = turretListArrayIndex+1;		if(turretListArrayIndex>turretListArray.length-1){			turretListArrayIndex = 0;		}				nearMC =MovieClip(mc_BtnMenu.btnContainer.getChildAt(0));		near2MC = MovieClip(mc_BtnMenu.btnContainer.getChildAt(1));		near3MC = MovieClip(mc_BtnMenu.btnContainer.getChildAt(2));				for(var j:int=4 ; j>=0;j--){			mc_BtnMenu.btnContainer.swapChildren(mc_BtnMenu.btnContainer.getChildAt(j),mc_BtnMenu.btnContainer.getChildAt(5));		}				var RA2:int = mc_BtnMenu.btnContainer.getChildAt(0).rotation;		RA2 = RA2 + 60;		TweenLite.to(mc_HandR,0.5,{rotation:6.8,onComplete:backPositionR});		TweenLite.to(near2MC,0.5,{scaleX:1.2,scaleY:1.2,rotation:RA2});		TweenLite.to(nearMC,0.5,{scaleX:1.05,scaleY:1.05,rotation:RA2});		TweenLite.to(near3MC,0.5,{scaleX:0.9,scaleY:0.9,rotation:RA2});		TweenLite.to(mc_BtnMenu,1,{rotation:rotateAngle,ease:Back.easeOut,onComplete:TargetComplete});		TweenLite.to(mc_BtnMenu.btnContainer.getChildAt(5),0.5,{scaleX:1.05,scaleY:1.05,rotation:RA2});		TweenLite.to(mc_BtnMenu.btnContainer.getChildAt(3),0.5,{rotation:RA2});		TweenLite.to(mc_BtnMenu.btnContainer.getChildAt(4),0.5,{rotation:RA2});		TweenLite.to(mc_BtnMenu.btnContainer.getChildAt(2),0.5,{rotation:RA2});		selectweapon.play();		changeTheMenuContent();	}	}}function changeTheMenuContent():void{		var aryTotalIndex:int = turretListArray.length -1;	var arIndex:int = turretListArrayIndex;	var eachBtn2Content:int;	var eachBtn4Content:int;	var tempDiff:int = aryTotalIndex-arIndex;	if( mc_BtnMenu.btnContainer.getChildAt(2).getChildByName("btnCon")!= null){		mc_BtnMenu.btnContainer.getChildAt(2).removeChild(mc_BtnMenu.btnContainer.getChildAt(2).getChildByName("btnCon"));	}	if( mc_BtnMenu.btnContainer.getChildAt(4).getChildByName("btnCon")!= null){		mc_BtnMenu.btnContainer.getChildAt(4).removeChild(mc_BtnMenu.btnContainer.getChildAt(4).getChildByName("btnCon"));	}		if(tempDiff == 0){		eachBtn2Content = 1;		eachBtn4Content = arIndex-2;	}		else if(tempDiff == 1){		eachBtn2Content = 0;		eachBtn4Content = arIndex-2;	}		else if(tempDiff == aryTotalIndex-1){		eachBtn2Content = arIndex+2;		eachBtn4Content = aryTotalIndex;	}		else if(tempDiff == aryTotalIndex){		eachBtn2Content = arIndex+2;		eachBtn4Content = aryTotalIndex-1;	}		else{		eachBtn2Content = arIndex+2;		eachBtn4Content = arIndex-2;	}	var spriteInBtn:Sprite = new Sprite();	spriteInBtn.name = "btnCon";	mc_BtnMenu.btnContainer.getChildAt(2).addChild(spriteInBtn);	mc_BtnMenu.btnContainer.getChildAt(2).getChildByName("btnCon").addChild(turretListArray[eachBtn2Content]);		var spriteInBtn2:Sprite = new Sprite();	spriteInBtn2.name = "btnCon";	mc_BtnMenu.btnContainer.getChildAt(4).addChild(spriteInBtn2);	mc_BtnMenu.btnContainer.getChildAt(4).getChildByName("btnCon").addChild(turretListArray[eachBtn4Content]);}function backPositionR():void{	TweenLite.to(mc_HandR,0.5,{rotation:-8.8});}function updateTurStage(vturIndex:int):void{	turretStageArray.splice(vturIndex,1);	var k:int= turretStageArray.length;		for (var i:int=vturIndex; i<k;i++){		turretStageArray[i].aryIndex = i;	}	if(turretHolderBmpData != null){		turretHolderBmpData.dispose();	}		turretHolderBmpData = new BitmapData(650,450,true,0);		turretHolderBmpData.draw(stageTurretHolder);}function loopMusic(e:Event):void{	bgSoundChannel.removeEventListener(Event.SOUND_COMPLETE,loopMusic);    if (bgSoundChannel!= null)    {      		bgSoundChannel = levelBgMusic.play();			bgSoundChannel.soundTransform= bgtransform;			bgSoundChannel.addEventListener(Event.SOUND_COMPLETE,loopMusic);    }}